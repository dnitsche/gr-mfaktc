# SievePrimes defines how far the factor candidates (FCs) are presieved on
# the CPU. The first <SievePrimes> odd primes are used to sieve the FCs.
#
# Minimum: SievePrimes=5000
# Maximum: SievePrimes=200000
#
# Default: SievePrimes=25000

SievePrimes=25000


# Set this to 1 to enable automatically adjustments of SievePrimes during
# runtime based on the "average wait times".
#
# Default: SievePrimesAdjust=1

SievePrimesAdjust=1


# Set the number of CUDA streams / data sets used by mfaktc.
# NumStreams must be >= 1. In this case mfaktc can process one stream /
# data set on the GPU while the GPU can preprocess the other one. When
# NumStreams is >= 2 than the time needed to upload (CPU->GPU transfer)
# the data sets can be hidden (if the hardware supports it (most GPUs are
# supporting this)).
# On Linux systems 2 or 3 seems a good numbers. There are comments that
# Windows systems need a greater number of streams.
# A greater number increases the memory consumed by mfaktc (host and GPU
# memory). The current limit for the number of streams is 10!
# Don't be too greedy with this value, high values are usualy just a waste
# of memory.
#
# Minimum: NumStreams=1
# Maximum: NumStreams=10
#
# Default: NumStreams=3

NumStreams=3


# Set the number of data sets which can be preprocessed on CPU. This allows
# to tolerate more jitter on runtime of preprocessing and GPU stream
# runtime.
# Don't be too greedy with this value, high values are usualy just a waste
# of memory.
#
# Minimum: CPUStreams=1
# Maximum: CPUStreams=5
#
# Default: CPUStreams=3

CPUStreams=3


# The GridSize affects the number of threads per grid.
# Depending on the number of multiprocessors of your GPU, too, the
# automatic parameter threads per grid is set to:
#   GridSize = 0:  65536 < threads per grid <=  131072
#   GridSize = 1: 131072 < threads per grid <=  262144
#   GridSize = 2: 262144 < threads per grid <=  524288
#   GridSize = 3: 524288 < threads per grid <= 1048576 (default)
# A smaller GridSize has more overhead than a bigger GridSize for long
# running jobs. For really small jobs there can be a small benefit on
# computation time if the GridSize is small. A smaller GridSize directly
# reduces the runtime per kernel launch and might result in a better
# interactivity one older GPUs.
#
# Default: GridSize=3

GridSize=3


# WorkFile: the name of the file which contains the factoring assignments.
# e.g.
# worktodo.ini (Prime95 v24 and earlier)
# worktodo.txt (Prime95 v25 and newer)
#
# Default: WorkFile=worktodo.txt

WorkFile=worktodo.txt


# Checkpoints = 0: disable checkpoints
# Checkpoints = 1: enable checkpoints
# Checkpoints are needed for resume capability, after a class is finished a
# checkpoint file is written. When mfaktc is interrupted during the run and
# restarted later it will begin at the last processed class.
#
# Default: Checkpoints=1

Checkpoints=1


# CheckpointDelay is the time in seconds between two checkpoint writes.
# Allowed values are 0 <= CheckpointDelay <= 900.
#
# Minimum: CheckpointDelay=0
# Maximum: CheckpointDelay=900
#
# Default: CheckpointDelay=30

CheckpointDelay=30


# Allow to split an assignment into multiple bit ranges.
# 0 = disabled
# 1 = enabled
# Enabled Stages make only sense when StopAfterFactor is 1 or 2.
#
# Default: Stages=1

Stages=1


# possible values for StopAfterFactor:
# 0: Do not stop the current assignment after a factor was found.
# 1: When a factor was found for the current assignment stop after the
#    current bitlevel. This makes only sense when Stages is enabled.
# 2: When a factor was found for the current assignment stop after the
#    current class.
#
# Default: StopAfterFactor=1

StopAfterFactor=1


# possible values for PrintMode:
# 0: print a new line for each finished class
# 1: overwrite the current line (more compact output)
#
# Default: PrintMode=0

PrintMode=0


# allow the CPU to sleep if nothing can be preprocessed?
# 0: Do not sleep if the CPU must wait for the GPU
# 1: The CPU can sleep for a short time if it has to wait for the GPU
#
# Default: AllowSleep=0

AllowSleep=0
